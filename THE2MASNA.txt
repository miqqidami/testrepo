#include <stdio.h>
#include <stdlib.h>

int main() {

    /* TODO: Implement here */
    int rows=0,cols=0,x,y,i=0,j=0,k=0, count=0, stack[1000][2], visited[1000][2];
    char c, chars[100000], **labyrinth;
    int trackpath(char **labyrinth, int stack[1000][2], int visited[1000][2], int i, int cx, int cy, int rows, int cols);
    scanf("%d %d", &y, &x);
    while ((c = getchar()) != EOF) {
        if (c == '\n'){
            rows++;
            cols = count;
            count = 0;
        }else{
            chars[i] = c;
            count++;
            i++;
        }
    }
    rows--;
    labyrinth = (char **)malloc((rows+1) * sizeof(char *));
    for (i = 0; i < rows; i++) {
        labyrinth[i] = (char *)malloc(cols * sizeof(char));
    }
    
    for (i = 0; i < rows; i++){
        for (j = 0; j < cols; j++){
            labyrinth[i][j] = chars[k];
            k++;
        }
    }
    i = 0;
    if (trackpath(labyrinth, stack, visited, i, x, y, rows, cols) == 1){
        i = 0;
        while (stack[i][0] != 0){
            labyrinth[stack[i][0]][stack[i][1]] = '*';
            i++;
        }
    }else{
        i = 0;
        while (visited[i][0] != 0){
            labyrinth[visited[i][0]][visited[i][1]] = '.';
            i++;
        }
    }
    for (i = 0; i < rows; i++){
        for (j = 0; j < cols; j++){
            printf("%c", labyrinth[i][j]);
        }
        printf("\n");
    }
    free(labyrinth);
    return 0;
}
    
int trackpath(char **labyrinth, int stack[1000][2], int visited[1000][2], int i, int cx, int cy, int rows, int cols){
    int path = 0;
    stack[i][0] = cx;
    stack[i][1] = cy;
    visited[i][0] = cx;
    visited[i][1] = cy;
    i++;
    if ((cx != rows-1 && cx != 0) && (cy != 0 && cy != cols-1)){
        if (labyrinth[cx-1][cy] == ' ' && (cx-1 != stack[i-1][0] && cy != stack[i-1][1])){
            path = 1;
            if (trackpath(labyrinth, stack, visited, i, cx-1, cy, rows, cols) == 0){
                stack[i][0] = 0;
                stack[i][1] = 0;
                return 0;
            } else {
                return 1;
            }
            
        }
        if (labyrinth[cx][cy-1] == ' ' && (cx != stack[i-1][0] && cy-1 != stack[i-1][1])){
            path = 1;
            if (trackpath(labyrinth, stack, visited, i, cx, cy-1, rows, cols) ==0){
                stack[i][0] = 0;
                stack[i][1] = 0;
                return 0;
            } else {
                return 1;
            }
        }
        if (labyrinth[cx+1][cy] == ' ' && (cx+1 != stack[i-1][0] && cy != stack[i-1][1])){
            path = 1;
            if (trackpath(labyrinth, stack, visited, i, cx+1, cy, rows, cols) == 0){
                stack[i][0] = 0;
                stack[i][1] = 0;
                return 0;
            } else {
                return 1;
            }
            
        }
        if (labyrinth[cx][cy+1] == ' ' && (cx != stack[i-1][0] && cy+1 != stack[i-1][1])){
            path = 1;
            if (trackpath(labyrinth, stack, visited, i, cx, cy+1, rows, cols) == 0){
                stack[i][0] = 0;
                stack[i][1] = 0;
                return 0;
            } else {
                return 1;
            }
        }
        if (path == 0){
            i--;
            stack[i][0] = 0;
            stack[i][1] = 0;
            return 0;
        }
    } else {
        return 1;
    }
    
}
    
    
